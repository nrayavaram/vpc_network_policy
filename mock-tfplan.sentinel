import "strings"
import "types"

_modules = {
	"root": {
		"data": {},
		"path": [],
		"resources": {
			"google_compute_network": {
				"vpc_network": {
					0: {
						"applied": {
							"auto_create_subnetworks":         true,
							"delete_default_routes_on_create": false,
							"description":                     null,
							"mtu":                             1500,
							"name":                            "vpc-network",
							"timeouts":                        null,
						},
						"destroy": false,
						"diff": {
							"auto_create_subnetworks": {
								"computed": false,
								"new":      "true",
								"old":      "",
							},
							"delete_default_routes_on_create": {
								"computed": false,
								"new":      "false",
								"old":      "",
							},
							"description": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"gateway_ipv4": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"id": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"mtu": {
								"computed": false,
								"new":      "1500",
								"old":      "",
							},
							"name": {
								"computed": false,
								"new":      "vpc-network",
								"old":      "",
							},
							"project": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"routing_mode": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"self_link": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"timeouts": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
						},
						"requires_new": false,
					},
				},
			},
		},
	},
}

module_paths = [
	[],
]

terraform_version = "1.0.8"

variables = {
	"access_token": "REDACTED_SENSITIVE",
}

module = func(path) {
	if types.type_of(path) is not "list" {
		error("expected list, got", types.type_of(path))
	}

	if length(path) < 1 {
		return _modules.root
	}

	addr = []
	for path as p {
		append(addr, "module")
		append(addr, p)
	}

	return _modules[strings.join(addr, ".")]
}

data = _modules.root.data
path = _modules.root.path
resources = _modules.root.resources
